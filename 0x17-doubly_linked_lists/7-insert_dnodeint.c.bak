#include "lists.h"

/**
 * insert_dnodeint_at_index - inserts a new node at a given position
 * @h: pointer to the head of the doubly linked list
 * @idx: index of the node to be inserted, starting from 0
 * @n: data to be inserted into the new node
 * Return: pointer to the new node, or NULL if it fails
 */
dlistint_t *insert_dnodeint_at_index(dlistint_t **h, unsigned int idx, int n)
{
    dlistint_t *newnode, *tempnode;
    size_t size = 0;

    if (!h)
        return (NULL);

    /* create the new node */
    newnode = malloc(sizeof(dlistint_t));
    if (!newnode)
        return (NULL);
    newnode->n = n;
    tempnode = *h;
    if (idx != 0)
    {
        while (size != (idx - 1) && tempnode != NULL)
        {
            tempnode = tempnode->next;
            size++;
        }
    }

    /* check if the index is out of bounds */
    if (tempnode == NULL && idx != 0)
    {
        free(newnode);
        return (NULL);
    }

    /* if index is the first element */
    if (idx == 0)
    {
        newnode->next = *h;
        newnode->prev = NULL;

        if (*h)
            (*h)->prev = newnode;

        *h = newnode;
    }
    /* for other indices */
    else
    {
        newnode->next = tempnode->next;
        newnode->prev = tempnode;

        if (tempnode->next)
            tempnode->next->prev = newnode;

        tempnode->next = newnode;
    }

    return (newnode);
}
